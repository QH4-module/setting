<?php
/**
 * File Name: Index.php
 * Automatically generated by QGC tool
 * @date: 2021-05-23 19:52:49
 * @version: 4.0.4
 */

namespace qh4module\setting\models\setting;


use qttx\helper\ArrayHelper;
use qh4module\qhgc\SorterValidator;

/**
 * Class Index
 * 分页获取tbl_setting表的数据
 * @package qh4module\setting\models\setting
 */
class Index extends SettingModel
{
    /**
     * @var int 页数,从1开始
     */
    public $page = 1;

    /**
     * @var int 每页显示数量
     */
    public $limit = 10;

    /**
     * @var array 接收参数,排序规则
     * 格式:['id'=>'asc','name'=>'desc'],
     */
    public $sorter = [];

    /**
     * @var int 接收参数，筛选字段：ID
     */
    public $id;

    /**
     * @var string 接收参数，筛选字段：分组
     */
    public $group;

    /**
     * @var string 接收参数，筛选字段：KEY
     */
    public $key;

    /**
     * @var string 接收参数，筛选字段：名称
     */
    public $name;

    /**
     * @var int 接收参数，筛选字段：是否生效
     */
    public $is_effective;


    /**
     * @inheritDoc
     */
    public function rules()
    {
        return $this->mergeRules([
            [['page', 'limit'], 'integer'],
            [['sorter'], 'sorter'],
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function attributeLangs()
    {
        return $this->mergeLanguages(
            parent::attributeLangs(),
            [
                'page' => '页数',
                'limit' => '每页条数',
                'sorter' => '排序规则',
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        // 所有的字段,根据列表显示进行删减
        $fields = ['`ta`.`id`', '`ta`.`type`', '`ta`.`group`', '`ta`.`key`', '`ta`.`name`',
            '`ta`.`value`',  '`ta`.`update_by`', '`ta`.`update_time`', '`ta`.`is_effective`',
            '`ta`.`effective_start_time`', '`ta`.`effective_end_time`',
            'tb.nick_name as update_by_name'
        ];

        // 构建基础查询
        $tb_set = $this->external->settingTableName();
        $tb_info = $this->external->userInfoTableName();
        $db = $this->external->getDb();
        $sql = $db
            ->calcFoundRows()
            ->select($fields)
            ->from("$tb_set as ta")
            ->leftJoin("$tb_info as tb", 'ta.update_by=tb.user_id');

        // 追加筛选条件
        if ($this->id) {
            $sql->where('`ta`.`id`= :id704')
                ->bindValue('id704', $this->id);
        }
        if ($this->group) {
            $sql->where('`ta`.`group`= :group724')
                ->bindValue('group724', $this->group);
        }
        if ($this->key) {
            $sql->where('`ta`.`key`= :key157')
                ->bindValue('key157', $this->key);
        }
        if ($this->name) {
            $sql->where('`ta`.`name` like :name366')
                ->bindValue('name366', "%{$this->name}%");
        }
        if (!is_null($this->is_effective)) {
            $sql->where('`ta`.`is_effective`= :is_effective927')
                ->bindValue('is_effective927', $this->is_effective);
        }

        // 追加排序
        if ($this->sorter) {
            $sql->orderBy(SorterValidator::format2Mode1($this->sorter));
        }

        $data = $sql
            ->where('`ta`.`del_time`= :del_time719')
            ->bindValue('del_time719', 0)
            ->offset(($this->page - 1) * $this->limit)
            ->limit($this->limit)
            ->query();
        // 获取总数
        $total = $db->single('SELECT FOUND_ROWS()');

        return array(
            'total' => $total,
            'list' => $data,
            'page' => $this->page,
            'limit' => $this->limit
        );
    }
}
