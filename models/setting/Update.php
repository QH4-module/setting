<?php
/**
 * File Name: Update.php
 * Automatically generated by QGC tool
 * @date 2021-03-16 11:25:21
 * @version 4.0.0
 */

namespace qh4module\setting\models\setting;


use qh4module\token\TokenFilter;
use qttx\helper\ArrayHelper;

/**
 * Class Update
 * 更新tbl_setting表单条数据
 * @package qh4module\setting\models\setting
 */
class Update extends SettingModel
{
    
    /**
     * @var int 接收参数,必须：ID
     */
    public $id;

    /**
     * @var int 接收参数,非必须：类型
     */
    public $type;

    /**
     * @var string 接收参数,非必须：分组
     */
    public $group;

    /**
     * @var string 接收参数,必须：KEY
     */
    public $key;

    /**
     * @var string 接收参数,非必须：名称
     */
    public $name;

    /**
     * @var string 接收参数,非必须：值
     */
    public $value;

    /**
     * @var int 接收参数,非必须：是否生效
     */
    public $is_effective;

    /**
     * @var int 接收参数,非必须：生效的开始时间
     */
    public $effective_start_time;

    /**
     * @var int 接收参数,非必须：生效的结束时间
     */
    public $effective_end_time;


    /**
     * @inheritDoc
     */
    public function rules()
    {
        return ArrayHelper::merge([
            [['id','key'],'required']
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function run()
    {

        $db = \QTTX::$app->db;

        $db->beginTrans();

        try {

            $result = $db
                ->select('id')
                ->from($this->external->settingTableName())
                ->whereArray([
                    'group' => $this->group,
                    'key' => $this->key
                ])
                ->where('del_time=0')
                ->row();
            if ($result && $result['id'] != $this->id) {
                $db->rollBackTrans();
                $this->addError('key', '同组下KEY值重复');
                return false;
            }

            $db->update($this->external->settingTableName())
                ->cols([
                    'type' => $this->type,
                    'group' => $this->group,
                    'key' => $this->key,
                    'name' => $this->name ? $this->name : $this->key,
                    'value' => $this->value,
                    'update_by' => TokenFilter::getPayload('user_id'),
                    'update_time' => time(),
                    'is_effective' => $this->is_effective,
                    'effective_start_time' => $this->effective_start_time,
                    'effective_end_time' => $this->effective_end_time,
                ])
                ->whereArray(['id'=>$this->id])
                ->query();

            $db->commitTrans();

            return true;

        } catch (\Exception $exception) {
            $db->rollBackTrans();
            throw $exception;
        }

    }
}
